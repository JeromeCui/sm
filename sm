#!/bin/sh
# version 1.0  License: GPL 2.0
# author: chenwumail@gmail.com 2018
# TODO: 
# (1) sm-monitor support systemd.

[ -z "${SM_DIR}" ] && SM_DIR=${HOME}/sm #default svc dir is /home/{work}/sm

read_ini () {
  file=$1;section=$2;item=$3;
  val=$(awk -F '=' '/\['${section}'\]/{a=1} (a==1 && "'${item}'"==$1){print}' ${file}) 
  echo ${val#*=}
}
die () {
  retcode=$1
  msg=$2
  echo "${msg}"
  exit ${retcode}
}
die_usage() {
  usage
  exit 1
}
usage() {
  echo "SM_DIR=${SM_DIR}"
  echo "usage: sm <r|run|start>|<k|kill|stop>|<re|restart> <service-name>"
  echo "       sm <run-all>|<kill-all>"
  echo "       sm <s|status> [<service-name>]"
  echo "       sm <e|enable>|<d|disable> <service-name>"
  echo "       sm <l|list>"
  echo "       sm <exec> <service-name>"
  echo "       sm <init>"
  echo "Service Manager (sm) Manual:"
  echo "  \${SM_DIR}/user/ -- *.service files, defined by user, service-name same with filename without postfix(.service)"
  echo "  \${SM_DIR}/work/ -- symbol link of *.service, it created or deleted by <enable> and <disable> command",
  echo "                    prohibit manually work in this dir for will be removed automaticlly."
  echo "  \${SM_DIR}/pid/ -- *.pid files, auto generated"
  echo "  \${SM_DIR}/log/ -- *.log files, auto generated"
  echo "  service file format:"
  echo "    [Service]"
  echo "    ExecStart=<command> [arguments]  -- ONLY ABSOLUTE PATH SUPPORTED."
  echo "    WorkingDirectory= -- OPTIONAL, ABSOLUTE PATH, default is ${SM_DIR} when not set"
  echo "Restart service when crash: "
  echo "  (1) sm enable sm-monitor"
  echo "  (2) sm run sm-monitor"
  echo "  (3) add Restart=always to foo.service"
  echo "  if foo crash, sm-monitor while restart it, checked every 5 minutes."
  echo "  don't worry about sm stop <service-name>, it will not be restart automaticlly."
  echo "Serivce Group Management:"
  echo "  enable a service prefix with a sub-dir, it will create symbol link in sub-dir of work directory."
  echo "  user directory not support sub-dir. it can be run-all or kill-all independent, example: "
  echo "  (1) sm enable test/foo -- enable $SM_DIR/user/foo.service to $SM_DIR/work/test/foo.service"
  echo "  (2) sm enable test/bar"
  echo "  (3) sm run-all test -- start all service in test sub directory"
  echo "  (4) sm kill-all nosub -- will stop-all service in work directory without sub-directory."
  echo "  usage(with more description): sm <r|run|start>|<k|kill|stop>|<re|restart> [work-subdir-name/]<service-name>"
  echo "       sm <run-all|start-all>|<kill-all|stop-app> [<work-subdir-name>|nosub]"
  echo "       sm <s|status> [[work-subdir-name/]<service-name>|<work-subdir-name>|nosub]"
  echo "       sm <e|enable>|<d|disable> [work-subdir-name/]<service-name>" 
}

############### svc main ##################
sm_cmd=$1
sm_name=$2

[ -z "${sm_cmd}" ] && die_usage

sm_short_name=${sm_name#*/}
sm_dir=""
[ ! $sm_name = $sm_short_name ] && sm_dir=${sm_name%/*}

os=`uname`
ECHO="echo -e"
[ "${os}" = "Darwin" ] && ECHO="echo"

IGNORE_SUBDIR="nosub"

case $sm_cmd in
  # one initilize command, careful for SM_DIR, default is ${HOME}/app
  init)
    echo "SM_DIR=${SM_DIR}"
    test -d ${SM_DIR}/user || mkdir -p ${SM_DIR}/user
    test -d ${SM_DIR}/work || mkdir -p ${SM_DIR}/work
    test -d ${SM_DIR}/pid  || mkdir -p ${SM_DIR}/pid
    test -d ${SM_DIR}/log  || mkdir -p ${SM_DIR}/log
    echo "[Service]" > ${SM_DIR}/user/sm-monitor.service
    echo "ExecStart=/usr/bin/sm monitor" >> ${SM_DIR}/user/sm-monitor.service
    sm enable sm-monitor
    ;;  
  # two command for app service in user directory
  l)
    applist=$(ls ${SM_DIR}/user/)
    for app in $applist
    do
      name=${app%%.*}
      /bin/echo -n "$name "
    done
    echo ""
    ;;
  list)
    applist=$(ls ${SM_DIR}/user/)
    for app in $applist
    do
      name=${app%%.*}
      daemon=$(read_ini ${SM_DIR}/user/${name}.service Service ExecStart)
      echo "$name -- $daemon"
    done
    ;;
  # one exec command, foregroud execute service in user directory
  exec)
    [ -z "${sm_name}" ] && die_usage
    [ ! -f ${SM_DIR}/user/${sm_short_name}.service ] && die 2 "${SM_DIR}/user/${sm_short_name}.service not found."
    echo "exec $sm_name ..."
    daemon=$(read_ini ${SM_DIR}/user/${sm_short_name}.service Service ExecStart)
    [ -z "${daemon}" ] && die 3 "ExecStart not in Service section, or blank."
    echo $daemon
    $daemon
    ;;
  # two command to create or remove symbol link from user directory to work directory
  e|enable)
    [ -z "${sm_name}" ] && die_usage
    if [ -n "${sm_dir}" ]; then
      test -d ${SM_DIR}/work/${sm_dir} || mkdir -p ${SM_DIR}/work/${sm_dir}
      test -d ${SM_DIR}/pid/${sm_dir}  || mkdir -p ${SM_DIR}/pid/${sm_dir}
      test -d ${SM_DIR}/log/${sm_dir}  || mkdir -p ${SM_DIR}/log/${sm_dir}
    fi
    [ ! -f ${SM_DIR}/user/${sm_short_name}.service ] && die 2 "${SM_DIR}/user/${sm_short_name}.service not found."
    ln -sf ${SM_DIR}/user/${sm_short_name}.service ${SM_DIR}/work/${sm_name}.service
    ;;
  d|disable)
    [ -z "${sm_name}" ] && die_usage
    [ ! -f ${SM_DIR}/work/${sm_name}.service ] && die 2 "${SM_DIR}/user/${sm_short_name}.service not found."
    rm ${SM_DIR}/work/${sm_name}.service
    ;;    
  # two all commands, batch do something
  run-all|start-all)
    if [[ "x${sm_name}" = "x" || "x${sm_name}" = "x${IGNORE_SUBDIR}" ]]; then
      applist=$(ls ${SM_DIR}/work/)
      for app in $applist
      do
        name=${app%%.*}
        if [ -d ${SM_DIR}/work/${name} ]; then
          if [ ! "x${sm_name}" = "x${IGNORE_SUBDIR}" ]; then
            sm run-all $name
          fi
        else
          sm run $name
        fi
      done
      exit 0
    fi
    if [[ -n "${sm_name}" && -d ${SM_DIR}/work/${sm_name}  ]]; then # sm_name is dir name
      subapplist=$(ls ${SM_DIR}/work/${sm_name})
      for sub in $subapplist
      do
        subname=${sub%%.*}
        sm run ${sm_name}/${subname}
      done
      exit 0
    fi
    ;;
  kill-all|stop-all)
    if [[ "x${sm_name}" = "x" || "x${sm_name}" = "x${IGNORE_SUBDIR}" ]]; then
      applist=$(ls ${SM_DIR}/work/)
      for app in $applist
      do
        name=${app%%.*}
        if [ -d ${SM_DIR}/work/${name} ]; then
          [ ! "x${sm_name}" = "x${IGNORE_SUBDIR}" ] && sm kill-all $name
        else
          [ ! "${name}" = "sm-monitor" ] && sm kill $name
        fi
      done
      exit 0
    fi
    if [[ -n "${sm_name}" && -d ${SM_DIR}/work/${sm_name}  ]]; then # sm_name is dir name
      subapplist=$(ls ${SM_DIR}/work/${sm_name})
      for sub in $subapplist
      do
        subname=${sub%%.*}
        sm kill ${sm_name}/${subname}
      done
      exit 0
    fi
    ;;
  r|run|start)
    [ -z "${sm_name}" ] && die_usage
    [ ! -f ${SM_DIR}/work/${sm_name}.service ] && die 2 "${SM_DIR}/work/${sm_name}.service not found."
    last_pid=`test -f ${SM_DIR}/pid/${sm_name}.pid && cat ${SM_DIR}/pid/${sm_name}.pid` || last_pid=-1
    ps -p $last_pid > /dev/null 2>&1
    status=$?
    if [ $status -eq 0 ]; then
      $ECHO "\033[32m active (running) \033[0m  $sm_name"
      ps -f -p $last_pid
      $ECHO "\033[33m warning \033[0m $sm_name already running."
      exit 0
    fi    
    echo "start $sm_name ..."
    daemon=$(read_ini ${SM_DIR}/work/${sm_name}.service Service ExecStart)
    workdir=$(read_ini ${SM_DIR}/work/${sm_name}.service Service WorkingDirectory)
    if [ "x${workdir}" = "x" ]; then
      workdir=${SM_DIR}
    fi
    echo $daemon
    cd $workdir
    $daemon > ${SM_DIR}/log/${sm_name}.log 2>&1 &
    pid=$!
    cd -
    echo $pid > ${SM_DIR}/pid/${sm_name}.pid
    echo "started, pid = ${pid}."
    ;;
  re|restart)
    sm stop $sm_name
    sleep 3
    sm start $sm_name
    ;;
  monitor) # don't run it manaully, run by "sm run sm-monitor".
    echo "$(date -R) monitor started."
    while true
    do
      sleep 300
      # echo "$(date -R) monitor running."
      sm monitor-always
      # echo "$(date -R) monitor finished."
    done
    ;;
  monitor-always) # don't run it manaully, it will called by monitor command.
    monitor_dir=${SM_DIR}/work/
    [ -n ${sm_name} ] && monitor_dir=${SM_DIR}/work/${sm_name}
    applist=$(ls ${monitor_dir})
    for app in $applist
    do
      name=${app%%.*}
      if [ -d ${SM_DIR}/work/${name} ]; then
        [ "${SM_DIR}/work/" = "${monitor_dir}" ] && sm monitor-always ${name} # only support one level subdir
        continue
      fi
      service_name=$name
      [ -n "${sm_name}" ] && service_name=$sm_name/$name
      if [ ! -f ${SM_DIR}/work/${service_name}.service ]; then
       echo "${SM_DIR}/work/${service_name}.service not found."
       continue
      fi
      always=$(read_ini ${SM_DIR}/work/${service_name}.service Service Restart)
      if [ "x${always}" = "xalways" ]; then
        if [ -f ${SM_DIR}/pid/${service_name}.pid ]; then

          last_pid=`test -f ${SM_DIR}/pid/${service_name}.pid && cat ${SM_DIR}/pid/${service_name}.pid` || last_pid=-1
          ps -p $last_pid > /dev/null 2>&1
          status=$?
          if [ $status -eq 0 ]; then
            echo $service_name > /dev/null
          else            
            echo "$(date -R) starting crashed process ${service_name} ..."
            sm run $service_name   
          fi

        fi # else no pid file,ignore
      fi # else not always restart, ignore
    done    
    ;;     
  k|kill|stop)
    [ -z "${sm_name}" ] && die_usage
    last_pid=`test -f ${SM_DIR}/pid/${sm_name}.pid && cat ${SM_DIR}/pid/${sm_name}.pid` || exit 2
    ps -p $last_pid > /dev/null 2>&1
    status=$?
    if [ $status -ne 0 ]; then
      echo "(pid=${last_pid}) No such process"
      test -f ${SM_DIR}/pid/${sm_name}.pid && rm ${SM_DIR}/pid/${sm_name}.pid
      exit 3
    fi
    echo "stop $sm_name (pid=${last_pid}) ... "
    if [ $last_pid -gt 0 ]; then
      kill -9 $last_pid && rm ${SM_DIR}/pid/${sm_name}.pid
    else
      echo "unknow error to stop"
      exit 4
    fi
    ;;
  s|status)
    if [ "x${sm_name}" = "x" ]; then
      applist=$(ls ${SM_DIR}/work/)
      for app in $applist
      do
        name=${app%%.*}
        sm ${sm_cmd} ${name}
      done
      exit 0
    fi
    if [ "x${sm_name}" = "x${IGNORE_SUBDIR}" ]; then
      applist=$(ls ${SM_DIR}/work/)
      for app in $applist
      do
        name=${app%%.*}
        if [ ! -d ${SM_DIR}/work/${name} ]; then # skip sub dir
          sm ${sm_cmd} ${name}
        fi
      done
      exit 0
    fi    
    if [ -d ${SM_DIR}/work/${sm_name} ]; then
      subapplist=$(ls ${SM_DIR}/work/${sm_name}/)
      for sub in $subapplist
      do
        sub_name=${sub%%.*}
        sm ${sm_cmd} ${sm_name}/$sub_name
      done
      exit 0
    fi
    if [ ! -f ${SM_DIR}/work/${sm_name}.service ]; then
      echo "${sm_name} not found." 
      exit 9
    fi
    last_pid=`test -f ${SM_DIR}/pid/${sm_name}.pid && cat ${SM_DIR}/pid/${sm_name}.pid` || last_pid=-1
    ps -p $last_pid > /dev/null 2>&1
    status=$?
    cmd_line=""
    if [ $status -eq 0 ]; then
      if [ ${sm_cmd} = "status" ]; then
        line=`ps -f -p $last_pid | tail -n 1`
        cmd_line="/${line#*/}"
      fi
      $ECHO "\033[32m active (running) \033[0m [$sm_name] -- $last_pid ${cmd_line}"
    else
      if [ ${sm_cmd} = "status" ]; then
        cmd_line="-- $(read_ini ${SM_DIR}/work/${sm_name}.service Service ExecStart)"
      fi
      $ECHO "\033[31m inactive \033[0m [$sm_name] ${cmd_line}"
    fi
    ;;
  log)
    [ -z "${sm_name}" ] && die_usage
    [ ! -f  ${SM_DIR}/log/${sm_name}.log ] && die 2 "${SM_DIR}/log/${sm_name}.log not found."
    tail -n 100 ${SM_DIR}/log/${sm_name}.log
    ;;   
  *)
    echo "unknown sm command: $sm_cmd, try \"sm\" to get more help."
    ;;
esac

############### svc main end ################